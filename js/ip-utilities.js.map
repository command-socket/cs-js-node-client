{"version":3,"sources":["../ts/ip-utilities.ts"],"names":["http","__importStar","require","https","cachedIP","getPublicIP","undefined","sites","promises","site","push","Promise","resolve","reject","data","options","method","startsWith","get","response","on","chunk","complete","any","trim","exports"],"mappings":"gkBAMA,MAAAA,KAAAC,aAAAC,QAAA,SACAC,MAAAF,aAAAC,QAAA,UASA,IAAIE,SAEJ,SAAsBC,+DAErB,QAAiBC,IAAbF,SAAwB,CAE3B,IAAIG,EAAkB,CACrB,yBACA,wBACA,yCAGGC,EAAmC,GAEvC,IAAK,IAAIC,KAAQF,EAEhBC,EAASE,KAAK,IAAIC,QACjB,CAACC,EAA2DC,KAE5D,IAAIC,EAAe,GAEfC,EAA+B,CAAEC,OAAQ,OAEzCP,EAAKQ,WAAW,SAEnBd,MAAMe,IAAIT,EAAMM,EAAUI,IAEzBA,EAASC,GAAG,OAASC,GAAoBP,GAAQO,GAEjDF,EAASC,GAAG,MAAO,KAEbD,EAASG,SACTV,EAAQE,GADWD,QAS1Bb,KAAKkB,IAAIT,EAAMM,EAAUI,IAExBA,EAASC,GAAG,OAASC,GAAoBP,GAAQO,GAEjDF,EAASC,GAAG,MAAO,KAEbD,EAASG,SACTV,EAAQE,GADWD,WAa7BT,gBAAkBO,QAAQY,IAAYf,IAAWgB,OAIlD,OAAOpB,YAvERF,QAAA,wBAUAuB,QAAApB,YAAAA","file":"ip-utilities.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t8:13 PM -- October 28th, 2019.\n *\tProject: @command-socket/core\n */\n\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport \"promise-any-polyfill\";\n\n/**\n * The cached public IP of the device/network from which this module is operating.\n *\n * This is initially undefined, until the first time the {@link #getPublicIP} function is called, after which the cached\n * IP is used as the immediate return value of the `getPublicIP` function.\n */\nlet cachedIP: string | undefined;\n\nexport async function getPublicIP(): Promise<string> {\n\t\n\tif (cachedIP === undefined) {\n\t\t\n\t\tlet sites: string[] = [\n\t\t\t\"https://icanhazip.com/\",\n\t\t\t\"http://api.ipify.org/\",\n\t\t\t\"http://ipv4bot.whatismyipaddress.com/\"\n\t\t];\n\t\t\n\t\tlet promises: Array<Promise<string>> = [];\n\t\t\n\t\tfor (let site of sites) {\n\t\t\t\n\t\t\tpromises.push(new Promise<string>(\n\t\t\t\t(resolve: (value?: (PromiseLike<string> | string)) => void, reject: (reason?: any) => void): void => {\n\t\t\t\t\n\t\t\t\tlet data: string = \"\";\n\t\t\t\t\n\t\t\t\tlet options: http.RequestOptions = { method: \"GET\" };\n\t\t\t\t\n\t\t\t\tif (site.startsWith(\"https\")) {\n\t\t\t\t\t\n\t\t\t\t\thttps.get(site, options, (response: http.IncomingMessage): void => {\n\t\t\t\t\t\t\n\t\t\t\t\t\tresponse.on(\"data\", (chunk: any): any => data += chunk);\n\t\t\t\t\t\t\n\t\t\t\t\t\tresponse.on(\"end\", (): void => {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!response.complete) reject();\n\t\t\t\t\t\t\telse resolve(data);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\thttp.get(site, options, (response: http.IncomingMessage): void => {\n\t\t\t\t\t\t\n\t\t\t\t\t\tresponse.on(\"data\", (chunk: any): any => data += chunk);\n\t\t\t\t\t\t\n\t\t\t\t\t\tresponse.on(\"end\", (): void => {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!response.complete) reject();\n\t\t\t\t\t\t\telse resolve(data);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}));\n\t\t\n\t\t}\n\t\t\n\t\tcachedIP = (await Promise.any<string>(promises)).trim();\n\t\t\n\t}\n\t\n\treturn cachedIP as string;\n\t\n}"]}