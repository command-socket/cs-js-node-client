{"version":3,"sources":["../ts/node-websocket.ts"],"names":["ws_1","__importDefault","require","core_1","IPUtilities","__importStar","NodeWebSocket","[object Object]","urlOrWebSocket","this","websocket","default","events","SocketEvents","addEventListener","OPEN","notify","source","event","MESSAGE","data","CLOSE","code","reason","send","close","getPublicIP","exports"],"mappings":"8pBAMA,MAAAA,KAAAC,gBAAAC,QAAA,OACAC,OAAAD,QAAA,wBACAE,YAAAC,aAAAH,QAAA,mBA0BA,MAAaI,cAQZC,YAAmBC,GAEsBC,KAAKC,UAAf,iBAAnBF,EAA8C,IAAIR,KAAAW,QAAUH,GACjDA,EAEtBC,KAAKG,OAAS,IAAIT,OAAAU,aAElBJ,KAAKC,UAAUI,iBAAiB,OAAQ,KAEvCL,KAAKG,OAAOG,KAAKC,OAAO,CACvBC,OAAQR,SAKVA,KAAKC,UAAUI,iBAAiB,UAAYI,IAE3CT,KAAKG,OAAOO,QAAQH,OAAO,CAC1BC,OAAQR,KACRW,KAAMF,EAAME,SAKdX,KAAKC,UAAUI,iBAAiB,QAAUI,IAEzCT,KAAKG,OAAOS,MAAML,OAAO,CACxBC,OAAQR,KACRa,KAAMJ,EAAMI,KACZC,OAAQL,EAAMK,WASVhB,KAAKa,GAEXX,KAAKC,UAAUc,KAAKJ,GAIdb,MAAMe,EAAeC,GAE3Bd,KAAKC,UAAUe,MAAMH,EAAMC,GAIfhB,yDAEZ,aAAaH,YAAYsB,iBAInBnB,YAEN,OAAOE,KAAKG,QAlEde,QAAArB,cAAAA","file":"node-websocket.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t11:36 PM -- November 23rd, 2019.\n *\tProject: @command-socket/node-client\n */\n\nimport WebSocket from \"ws\";\nimport { ISocket, SocketEvents } from \"@command-socket/core\";\nimport * as IPUtilities from \"./ip-utilities\";\n\ntype MessageEvent = {\n\t\n\tdata: any;\n\ttype: string;\n\ttarget: WebSocket;\n\t\n};\n\ntype CloseEvent = {\n\t\n\twasClean: boolean;\n\tcode: number;\n\treason: string;\n\ttarget: WebSocket;\n\t\n};\n\n/**\n *\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class NodeWebSocket implements ISocket {\n\t\n\tprivate websocket: WebSocket;\n\t\n\tprivate events: SocketEvents;\n\t\n\tpublic constructor(url: string);\n\tpublic constructor(websocket: WebSocket);\n\tpublic constructor(urlOrWebSocket: string | WebSocket) {\n\t\t\n\t\tif (typeof urlOrWebSocket === \"string\") this.websocket = new WebSocket(urlOrWebSocket);\n\t\telse this.websocket = urlOrWebSocket;\n\t\t\n\t\tthis.events = new SocketEvents();\n\t\t\n\t\tthis.websocket.addEventListener(\"open\", (): void => {\n\t\t\t\n\t\t\tthis.events.OPEN.notify({\n\t\t\t\tsource: this\n\t\t\t});\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.websocket.addEventListener(\"message\", (event: MessageEvent): void => {\n\t\t\t\n\t\t\tthis.events.MESSAGE.notify({\n\t\t\t\tsource: this,\n\t\t\t\tdata: event.data\n\t\t\t});\n\t\t\t\n\t\t});\n\t\t\n\t\tthis.websocket.addEventListener(\"close\", (event: CloseEvent): void => {\n\t\t\t\n\t\t\tthis.events.CLOSE.notify({\n\t\t\t\tsource: this,\n\t\t\t\tcode: event.code,\n\t\t\t\treason: event.reason\n\t\t\t});\n\t\t\t\n\t\t});\n\t\t\n\t\t// TODO [11/24/19 @ 12:08 AM] - Error event?\n\t\n\t}\n\t\n\tpublic send(data: any): void {\n\t\t\n\t\tthis.websocket.send(data);\n\t\t\n\t}\n\t\n\tpublic close(code?: number, reason?: string): void {\n\t\n\t\tthis.websocket.close(code, reason);\n\t\n\t}\n\t\n\tpublic async getIP(): Promise<string> {\n\t\n\t\treturn await IPUtilities.getPublicIP();\n\t\n\t}\n\t\n\tpublic getEvents(): SocketEvents {\n\t\t\n\t\treturn this.events;\n\t\t\n\t}\n\t\n}"]}