{"version":3,"sources":["../ts/command-socket-node-client.ts"],"names":["core_1","require","node_websocket_1","CommandSocketNodeClient","CommandSocket","[object Object]","urlOrWebSocket","commandRegistry","CommandRegistry","metadata","super","NodeWebSocket","Promise","resolve","commandsocket","getEvents","OPEN","subscribe","exports"],"mappings":"oEAOA,MAAAA,OAAAC,QAAA,wBAKAC,iBAAAD,QAAA,oBASA,MAAaE,gCAGeH,OAAAI,cAI3BC,YAAsBC,EACfC,EAAwC,IAAIP,OAAAQ,gBAAwBC,EAAuB,IAEjGC,MAAM,IAAIR,iBAAAS,cAAcL,GAAwBC,EAAiBE,GAU3DJ,cAAgFC,EAChFC,EAAwC,IAAIP,OAAAQ,iBAElD,OAAO,IAAII,QAAkCC,IAE5C,IAAIC,EAAyC,IAAIX,wBAAwBG,EAAuBC,GAEhGO,EAAcC,YAAYC,KAAKC,UAAU,IAAYJ,EAAQC,OA3BhEI,QAAAf,wBAAAA","file":"command-socket-node-client.js","sourcesContent":["/*\n *\tCreated by Trevor Sears <trevorsears.main@gmail.com>.\n *\t11:35 PM -- November 23rd, 2019.\n *\tProject: @command-socket/node-client\n */\n\nimport WebSocket from \"ws\";\nimport {\n\tCommandSocket,\n\tCommandSetStructure,\n\tCommandRegistry\n} from \"@command-socket/core\";\nimport { NodeWebSocket } from \"./node-websocket\";\n\n/**\n * A browser-specific implementation of a CommandSocket.\n *\n * @author Trevor Sears <trevorsears.main@gmail.com>\n * @version v0.1.0\n * @since v0.1.0\n */\nexport class CommandSocketNodeClient<\n\tLCS extends CommandSetStructure = any,\n\tRCS extends CommandSetStructure = any,\n\tM extends {} = {}> extends CommandSocket<LCS, RCS, M> {\n\t\n\tprotected constructor(url: string, commandRegistry?: CommandRegistry<LCS>, metadata?: Partial<M>);\n\tprotected constructor(websocket: WebSocket, commandRegistry?: CommandRegistry<LCS>, metadata?: Partial<M>);\n\tprotected constructor(urlOrWebSocket: string | WebSocket,\n\t\t\t\t\t   commandRegistry: CommandRegistry<LCS> = new CommandRegistry<LCS>(), metadata: Partial<M> = {}) {\n\t\t\n\t\tsuper(new NodeWebSocket(urlOrWebSocket as any), commandRegistry, metadata);\n\t\t\n\t}\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure>(\n\t\turl: string, commandRegistry?: CommandRegistry<LCS>): Promise<CommandSocket<LCS, RCS>>;\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure>(\n\t\twebsocket: WebSocket, commandRegistry?: CommandRegistry<LCS>): Promise<CommandSocket<LCS, RCS>>;\n\t\n\tpublic static create<LCS extends CommandSetStructure, RCS extends CommandSetStructure>(urlOrWebSocket: string | WebSocket,\n\t\t\t\t\t   commandRegistry: CommandRegistry<LCS> = new CommandRegistry<LCS>()): Promise<CommandSocket<LCS, RCS>> {\n\t\t\n\t\treturn new Promise<CommandSocket<LCS, RCS>>((resolve: (value?: (PromiseLike<CommandSocket<LCS, RCS>> | CommandSocket<LCS, RCS>)) => void): void => {\n\t\t\t\n\t\t\tlet commandsocket: CommandSocket<LCS, RCS> = new CommandSocketNodeClient(urlOrWebSocket as any, commandRegistry);\n\t\t\t\n\t\t\tcommandsocket.getEvents().OPEN.subscribe((): void => resolve(commandsocket));\n\t\t\t\n\t\t});\n\t\t\n\t}\n\t\n}"]}